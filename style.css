body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f3f4f6;
}

.container {
    text-align: center;
}

h1 {
    color: #ff5733;
}

.board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 10px;
    margin: 20px auto;
}

.board div {
    width: 100px;
    height: 100px;
    background-color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36px;
    border: 2px solid #333;
    cursor: pointer;
}

.board div:hover {
    background-color: #ffeb3b;
}

button {
    padding: 10px 20px;
    background-color: #ff5733;
    color: white;
    border: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

button:hover {
    background-color: #ff3d00;
}
// Função para fazer o movimento do jogador (X)
function playerMove(row, col) {
    // Faz a requisição para o backend
    let xhr = new XMLHttpRequest();
    xhr.open("POST", "/game", true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
            let response = JSON.parse(xhr.responseText);
            updateBoard(response.board);
            checkGameOver(response.board);
        }
    };
    // Envia o movimento do jogador (row, col)
    xhr.send("row=" + row + "&col=" + col);
}

// Função para atualizar o tabuleiro na tela
function updateBoard(board) {
    let cells = document.querySelectorAll(".board div");
    let index = 0;
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            cells[index].textContent = board[i][j] === 0 ? "" : board[i][j];
            index++;
        }
    }
}

// Função para verificar se o jogo acabou
function checkGameOver(board) {
    let cells = document.querySelectorAll(".board div");
    if (isBoardFull(board)) {
        alert("Empate!");
    } else if (checkWinner(board)) {
        alert("Fim de jogo!");
    }
}

// Verifica se o tabuleiro está cheio (empate)
function isBoardFull(board) {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            if (board[i][j] === 0) {
                return false;
            }
        }
    }
    return true;
}

// Verifica se há um vencedor
function checkWinner(board) {
    // Lógica para verificar se há um vencedor
    // Verifique linhas, colunas e diagonais
    for (let i = 0; i < 3; i++) {
        if (board[i][0] !== 0 && board[i][0] === board[i][1] && board[i][1] === board[i][2]) {
            return true;
        }
        if (board[0][i] !== 0 && board[0][i] === board[1][i] && board[1][i] === board[2][i]) {
            return true;
        }
    }
    if (board[0][0] !== 0 && board[0][0] === board[1][1] && board[1][1] === board[2][2]) {
        return true;
    }
    if (board[0][2] !== 0 && board[0][2] === board[1][1] && board[1][1] === board[2][0]) {
        return true;
    }
    return false;
}

// Função para inicializar o tabuleiro
function createBoard() {
    let board = document.getElementById("board");
    board.innerHTML = ""; // Limpa o tabuleiro antes de desenhar
    for (let i = 0; i < 9; i++) {
        let cell = document.createElement("div");
        cell.addEventListener("click", function() {
            let row = Math.floor(i / 3);
            let col = i % 3;
            if (cell.textContent === "") {
                playerMove(row, col);
            }
        });
        board.appendChild(cell);
    }
}

// Inicializa o jogo
createBoard();
